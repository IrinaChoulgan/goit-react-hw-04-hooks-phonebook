{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/Contacts/ContactList.module.css","components/Filter/Filter.module.css","components/Contacts/ContactList.js","components/Filter/Filter.js","components/ContactForm/ContactForm.js","App.js","index.js"],"names":["module","exports","ContactList","contacts","onClick","className","styles","list","map","id","name","number","item","text","btn","Filter","onChange","wrapper","type","value","ContactForm","addNewContact","prodIdName","uuid","prodIdNumber","useState","setContact","setName","setNumber","handleChange","e","target","resetForm","form","onSubmit","preventDefault","contact","htmlFor","placeholder","pattern","title","required","submit","App","contactsArray","JSON","parse","window","localStorage","getItem","setContacts","useEffect","setItem","stringify","useLS","filter","setFilter","container","obj","find","toLowerCase","alert","prev","currentTarget","length","includes","contactId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gIACAA,EAAOC,QAAU,CAAC,UAAY,+BAA+B,KAAO,0BAA0B,OAAS,8B,iBCAvGD,EAAOC,QAAU,CAAC,KAAO,0BAA0B,KAAO,0BAA0B,IAAM,2B,mBCA1FD,EAAOC,QAAU,CAAC,QAAU,0B,+ZC+BbC,EA5BK,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,QAC/B,OACE,oBAAIC,UAAWC,IAAOC,KAAtB,SACGJ,EAASK,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,OAAb,OACZ,qBAAaN,UAAWC,IAAOM,KAA/B,UACE,oBAAGP,UAAWC,IAAOO,KAArB,UACGH,EADH,MACYC,KAEZ,wBAAQN,UAAWC,IAAOQ,IAAKV,QAAS,kBAAMA,EAAQK,IAAtD,sBAJOA,S,gBCUFM,EAdA,SAAC,GAAD,IAAGZ,EAAH,EAAGA,SAAUa,EAAb,EAAaA,SAAb,OACb,qBAAKX,UAAWC,IAAOW,QAAvB,SACE,0DAEE,uBAAOC,KAAK,OAAOC,MAAOhB,EAAUa,SAAUA,U,wBCJ7C,SAASI,EAAT,GAAyC,IAAlBC,EAAiB,EAAjBA,cACtBC,EAAaC,cACbC,EAAeD,cAErB,EAA8BE,mBAAS,MAAvC,mBAAgBC,GAAhB,WACA,EAAwBD,mBAAS,IAAjC,mBAAOf,EAAP,KAAaiB,EAAb,KACA,EAA4BF,mBAAS,IAArC,mBAAOd,EAAP,KAAeiB,EAAf,KAEMC,EAAe,SAAAC,GACnB,MAAwBA,EAAEC,OAAlBrB,EAAR,EAAQA,KAAMS,EAAd,EAAcA,MACd,OAAQT,GACN,IAAK,OACHiB,EAAQR,GACR,MACF,IAAK,SACHS,EAAUT,KAgBVa,EAAY,WAChBL,EAAQ,IACRC,EAAU,KAEZ,OACE,uBAAMvB,UAAWC,IAAO2B,KAAMC,SAhBX,SAAAJ,GACnBA,EAAEK,iBACF,IAAMC,EAAU,CACd1B,OACAC,SACAF,GAAIc,eAENF,EAAce,GACdV,EAAWU,GACXJ,KAOA,UACE,uBAAOK,QAASf,EAAhB,kBACA,uBACEb,GAAIa,EACJJ,KAAK,OACLR,KAAK,OACLS,MAAOT,EACP4B,YAAY,aACZC,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,EACRzB,SAAUa,IAEZ,uBACA,uBAAOQ,QAASb,EAAhB,oBACA,uBACEf,GAAIe,EACJN,KAAK,MACLR,KAAK,SACLS,MAAOR,EACP2B,YAAY,qBACZC,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,EACRzB,SAAUa,IAEZ,wBAAQX,KAAK,SAASb,UAAWC,IAAOoC,OAAxC,4B,YC3DS,SAASC,IACtB,IAWA,EAXc,SAAAC,GACZ,MAAgCnB,oBAC9B,kCACEoB,KAAKC,MAAMC,OAAOC,aAAaC,QAAQ,oBADzC,QACyDL,KAF3D,mBAAOzC,EAAP,KAAiB+C,EAAjB,KAOA,OAHAC,qBAAU,WACRH,aAAaI,QAAQ,WAAYP,KAAKQ,UAAUlD,MAC/C,CAACA,IACG,CAACA,EAAU+C,GAGYI,CAAMV,GAAtC,mBAAOzC,EAAP,KAAiB+C,EAAjB,KACA,EAA4BzB,mBAAS,IAArC,mBAAO8B,EAAP,KAAeC,EAAf,KAsBA,OACE,sBAAKnD,UAAWC,IAAOmD,UAAvB,UACE,oBAAIpD,UAAWC,IAAOkC,MAAtB,uBACA,cAACpB,EAAD,CAAaC,cAvBK,SAAAqC,GAElBvD,EAASwD,MACP,SAAAvB,GAAO,OAAIA,EAAQ1B,KAAKkD,gBAAkBF,EAAIhD,KAAKkD,iBAGrDC,MAAM,GAAD,OAAIH,EAAIhD,KAAR,4BACAwC,GAAY,SAAAY,GAAI,4BAAQA,GAAR,CAAcJ,UAiBnC,0CAEA,cAAC,EAAD,CAAQvD,SAAUoD,EAAQvC,SAdP,SAAAc,GACrB0B,EAAU1B,EAAEiC,cAAc5C,UAcH,IAApBhB,EAAS6D,OACR,wEAEA,cAAC,EAAD,CAAa7D,SAdVA,EAASoD,QAAO,SAAAnB,GAAO,OAC5BA,EAAQ1B,KAAKkD,cAAcK,SAASV,EAAOK,kBAaCxD,QArB1B,SAAA8D,GACpBhB,EAAY/C,EAASoD,QAAO,SAAAnB,GAAO,OAAIA,EAAQ3B,KAAOyD,YC3B1DC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC1B,EAAD,MAEF2B,SAASC,eAAe,W","file":"static/js/main.8f3fa0e1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ContactForm_container__1INJV\",\"form\":\"ContactForm_form__1fuOn\",\"submit\":\"ContactForm_submit__ChZTI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactList_item__lk0Rm\",\"text\":\"ContactList_text__MyT-R\",\"btn\":\"ContactList_btn__2de-X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Filter_wrapper__IqOjQ\"};","import React from 'react';\nimport styles from './ContactList.module.css';\nimport PropTypes from 'prop-types';\n\nconst ContactList = ({ contacts, onClick }) => {\n  return (\n    <ul className={styles.list}>\n      {contacts.map(({ id, name, number }) => (\n        <li key={id} className={styles.item}>\n          <p className={styles.text}>\n            {name} : {number}\n          </p>\n          <button className={styles.btn} onClick={() => onClick(id)}>\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.any.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default ContactList;\n","import React from 'react';\nimport styles from './Filter.module.css';\nimport PropTypes from 'prop-types';\n\nconst Filter = ({ contacts, onChange }) => (\n  <div className={styles.wrapper}>\n    <label>\n      Find contacts by name\n      <input type=\"text\" value={contacts} onChange={onChange} />\n    </label>\n  </div>\n);\n\nFilter.propTypes = {\n  contacts: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import { useState } from 'react';\nimport { v4 as uuid } from 'uuid';\nimport styles from './ContactForm.module.css';\n\nexport function ContactForm({ addNewContact }) {\n  const prodIdName = uuid();\n  const prodIdNumber = uuid();\n\n  const [contact, setContact] = useState(null);\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n    }\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    const contact = {\n      name,\n      number,\n      id: uuid(),\n    };\n    addNewContact(contact);\n    setContact(contact);\n    resetForm();\n  };\n  const resetForm = () => {\n    setName('');\n    setNumber('');\n  };\n  return (\n    <form className={styles.form} onSubmit={handleSubmit}>\n      <label htmlFor={prodIdName}>Name</label>\n      <input\n        id={prodIdName}\n        type=\"text\"\n        name=\"name\"\n        value={name}\n        placeholder=\"enter name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n        onChange={handleChange}\n      />\n      <br />\n      <label htmlFor={prodIdNumber}>Number</label>\n      <input\n        id={prodIdNumber}\n        type=\"tel\"\n        name=\"number\"\n        value={number}\n        placeholder=\"enter phone number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n        required\n        onChange={handleChange}\n      />\n      <button type=\"submit\" className={styles.submit}>\n        Add contact\n      </button>\n    </form>\n  );\n}\n","import { useState, useEffect } from 'react';\nimport ContactList from './components/Contacts/ContactList';\nimport Filter from './components/Filter/Filter';\nimport { ContactForm } from './components/ContactForm/ContactForm';\nimport styles from './components/ContactForm/ContactForm.module.css';\nimport contactsArray from './components/contacts.json';\n\nexport default function App() {\n  const useLS = contactsArray => {\n    const [contacts, setContacts] = useState(\n      () =>\n        JSON.parse(window.localStorage.getItem('contacts')) ?? contactsArray,\n    );\n    useEffect(() => {\n      localStorage.setItem('contacts', JSON.stringify(contacts));\n    }, [contacts]);\n    return [contacts, setContacts];\n  };\n\n  const [contacts, setContacts] = useLS(contactsArray);\n  const [filter, setFilter] = useState('');\n\n  const addNewContact = obj => {\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === obj.name.toLowerCase(),\n      )\n    ) {\n      alert(`${obj.name} is already in contacts`);\n    } else setContacts(prev => [...prev, obj]);\n  };\n  const deleteContact = contactId => {\n    setContacts(contacts.filter(contact => contact.id !== contactId));\n  };\n  const onChangeFilter = e => {\n    setFilter(e.currentTarget.value);\n  };\n  const visibleContacts = () => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase()),\n    );\n  };\n  return (\n    <div className={styles.container}>\n      <h1 className={styles.title}>Phonebook</h1>\n      <ContactForm addNewContact={addNewContact} />\n      <h2>Contacts</h2>\n\n      <Filter contacts={filter} onChange={onChangeFilter} />\n      {contacts.length === 0 ? (\n        <p>Your phone book is empty. Add contacts.</p>\n      ) : (\n        <ContactList contacts={visibleContacts()} onClick={deleteContact} />\n      )}\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}